name: Deploy to ECR and EC2

on:
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./backend/cicd/Dockerfile
          push: true
          tags: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key

          # Base commands for AWS setup
          BASE_COMMANDS="aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && \
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && \
          aws configure set region ${{ env.AWS_REGION }} && \
          aws ecr get-login-password --region ${{ env.AWS_REGION }}| docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }} && \
          docker ps -a -q | xargs -r docker stop && \
          docker ps -a -q | xargs -r docker rm && \
          docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest"

          DEPLOY_COMMANDS="&& docker run -d --restart=unless-stopped -p 3000:8000 \
            -e SIMULATION_DATABASE_HOST='${{ secrets.SIMULATION_DATABASE_HOST }}' \
            -e SIMULATION_DATABASE_PORT='${{ secrets.SIMULATION_DATABASE_PORT }}' \
            -e SIMULATION_DATABASE_USER='${{ secrets.SIMULATION_DATABASE_USER }}' \
            -e SIMULATION_DATABASE_PASSWORD='${{ secrets.SIMULATION_DATABASE_PASSWORD }}' \
            -e TC_BASE_1='${{ secrets.TC_BASE_1 }}' \
            -e TC_BASE_2='${{ secrets.TC_BASE_2 }}' \
            -e SM_BASE_1='${{ secrets.SM_BASE_1 }}' \
            -e SM_BASE_2='${{ secrets.SM_BASE_2 }}' \
            '${{ secrets.ECR_REGISTRY }}'/'${{ secrets.ECR_REPOSITORY }}':latest && \
          docker run -d --restart=unless-stopped -p 3020:8000 \
            -e SIMULATION_DATABASE_HOST='${{ secrets.SIMULATION_DATABASE_HOST }}' \
            -e SIMULATION_DATABASE_PORT='${{ secrets.SIMULATION_DATABASE_PORT }}' \
            -e SIMULATION_DATABASE_USER='${{ secrets.SIMULATION_DATABASE_USER }}' \
            -e SIMULATION_DATABASE_PASSWORD='${{ secrets.SIMULATION_DATABASE_PASSWORD }}' \
            -e TC_BASE_1='${{ secrets.TC_BASE_1 }}' \
            -e TC_BASE_2='${{ secrets.TC_BASE_2 }}' \
            -e SM_BASE_1='${{ secrets.SM_BASE_1 }}' \
            -e SM_BASE_2='${{ secrets.SM_BASE_2 }}' \
            '${{ secrets.ECR_REGISTRY }}'/'${{ secrets.ECR_REPOSITORY }}':latest"

          # Execute the commands
          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOSTNAME} "${BASE_COMMANDS} ${DEPLOY_COMMANDS}"

          rm -f private_key
